/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.haoict.ictclingworkbench;

import java.util.List;
import javax.swing.JOptionPane;
import org.fourthline.cling.UpnpService;
import org.fourthline.cling.controlpoint.ActionCallback;
import org.fourthline.cling.model.action.ActionArgumentValue;
import org.fourthline.cling.model.action.ActionInvocation;
import org.fourthline.cling.model.message.UpnpResponse;
import org.fourthline.cling.model.meta.Action;
import org.fourthline.cling.model.meta.Device;
import org.fourthline.cling.model.meta.Service;
import org.fourthline.cling.model.state.StateVariableValue;
import org.fourthline.cling.model.types.UDAServiceType;

/**
 *
 * @author Hao
 */
public class ConsoleFrame extends javax.swing.JFrame implements IOnDeviceMonitorEvent {

    /**
     * Creates new form ConsoleFrame
     */
    private UpnpService upnpService;
    private MainFrame mainFrame;
    
    public ConsoleFrame() {
        initComponents();
    }
    
    public ConsoleFrame(MainFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame;
        this.upnpService = mainFrame.getUpnpServer().getUpnpService();           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConsoleLog = new javax.swing.JTextArea();
        jButtonClear = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaConsoleLog.setColumns(20);
        jTextAreaConsoleLog.setRows(5);
        jScrollPane1.setViewportView(jTextAreaConsoleLog);

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonClear))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonStop)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStart)
                    .addComponent(jButtonStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClear))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        for (Device d : mainFrame.getMyDeviceList()) {
            if (d.getDisplayString().equals(Constants.DOOR_NAME)) {
                for (Service s : d.getServices()) {
                    if (s.getServiceType().getType().equals(Constants.DOOR_SERVICE_NAME)) {
                        MonitorSubscriptionCallback msc = new MonitorSubscriptionCallback(s, this);
                        upnpService.getControlPoint().execute(msc);
                        break;
                    }
                }
            }
        }
        
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsoleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsoleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsoleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsoleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsoleFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaConsoleLog;
    // End of variables declaration//GEN-END:variables

    public void executeAction(String deviceName, String serviceName, 
            String actionName, String inputArgumentName, boolean value) {
        try {
            // find device
            Device device = null;
            for (Device d : mainFrame.getMyDeviceList()) {
                if (d.getDisplayString().equals(deviceName)) {
                    device = d;
                    break;
                }
            }
                        
            Service service = device.findService(new UDAServiceType(serviceName));
            Action action = service.getAction(actionName);
            ActionInvocation setTargetInvocation = new ActionInvocation(action);
            setTargetInvocation.setInput(inputArgumentName, value); // Can throw InvalidValueException

            ActionCallback setTargetCallback = new ActionCallback(setTargetInvocation) {

                @Override
                public void success(ActionInvocation invocation) {
                    ActionArgumentValue[] output = invocation.getOutput();
                    //assertEquals(output.length, 0);
                }

                @Override
                public void failure(ActionInvocation invocation,
                        UpnpResponse operation,
                        String defaultMsg) {
                    System.err.println(defaultMsg);
                }
            };

            upnpService.getControlPoint().execute(setTargetCallback);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    
    @Override
    public void onEventReceived(List<StateVariableValue> values) {
        for (StateVariableValue s : values) {
            if (s.getStateVariable().getName().equals(Constants.DOOR_SERVICE_STATUS)) {
                jTextAreaConsoleLog.append(s.getStateVariable().getName() + ": " + s.toString() + "\n");
                if (s.toString().equals("1")) {
                    // turn on the light
                    executeAction(Constants.LIGHT_NAME, Constants.LIGHT_SERVICE_NAME, 
                            Constants.LIGHT_ACTION_NAME, Constants.LIGHT_INPUT_ARGUMENT, true);
                } else {
                    executeAction(Constants.LIGHT_NAME, Constants.LIGHT_SERVICE_NAME, 
                            Constants.LIGHT_ACTION_NAME, Constants.LIGHT_INPUT_ARGUMENT, false);
                }
            }
            
        }
    }

    @Override
    public void onEventsMissed() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void onFailed() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void onEstablished() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void onEnded() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
