/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.haoict.ictclingworkbench;

import com.oracle.jrockit.jfr.DataType;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.fourthline.cling.UpnpService;
import org.fourthline.cling.controlpoint.ActionCallback;
import org.fourthline.cling.model.action.ActionArgumentValue;
import org.fourthline.cling.model.action.ActionInvocation;
import org.fourthline.cling.model.message.UpnpResponse;
import org.fourthline.cling.model.meta.Action;
import org.fourthline.cling.model.meta.ActionArgument;
import org.fourthline.cling.model.meta.Device;
import org.fourthline.cling.model.meta.Service;
import org.fourthline.cling.model.types.Datatype;
import org.fourthline.cling.model.types.InvalidValueException;
import org.fourthline.cling.model.types.UDAServiceType;

/**
 *
 * @author Hao
 */
public class InvokeActionFrame extends javax.swing.JFrame {

    private UpnpService upnpService;
    private Device device;
    private Service service;
    private Boolean isOn;
    private String SERVICE_NAME = "SwitchPower";
    private Action action;

    private DefaultTableModel myINTableModel;
    private DefaultTableModel myOUTTableModel;

    /**
     * Creates new form InvokeActionFrame
     */
    public InvokeActionFrame() {
        initComponents();
    }

    public InvokeActionFrame(UpnpService upnpService, Device device, Action action) {
        initComponents();

        this.upnpService = upnpService;
        this.device = device;
        this.action = action;

        myINTableModel = new DefaultTableModel();
        myINTableModel.addColumn("IN Arguments");
        myINTableModel.addColumn("Value");
        myINTableModel.addColumn("Datatype");
        jTableINArguments.setModel(myINTableModel);

        myOUTTableModel = new DefaultTableModel();
        myOUTTableModel.addColumn("OUT Arguments");
        myOUTTableModel.addColumn("Value");
        myOUTTableModel.addColumn("Datatype");
        jTableOUTArguments.setModel(myOUTTableModel);

        for (ActionArgument aa : action.getInputArguments()) {
            String[] rowData = {aa.getName(), null, aa.getDatatype().getDisplayString()};
            myINTableModel.addRow(rowData);
        }

        for (ActionArgument aa : action.getOutputArguments()) {
            String[] rowData = {aa.getName(), null, aa.getDatatype().getDisplayString()};
            myOUTTableModel.addRow(rowData);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonInvoke = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableOUTArguments = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableINArguments = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonInvoke.setText("Invoke");
        jButtonInvoke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInvokeActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jTableOUTArguments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "OUT Arguments", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableOUTArguments);

        jTableINArguments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "IN Arguments", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableINArguments);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonInvoke)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancel))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInvoke)
                    .addComponent(jButtonCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInvokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInvokeActionPerformed
        try {
            ActionInvocation actionInvocation = new ActionInvocation(action);
            
            if (myOUTTableModel.getRowCount() != 0) {
                // remove all out row to re insert result 
                for (int i = 0; i < myOUTTableModel.getRowCount(); i++) {
                    myOUTTableModel.removeRow(i);
                }
                // Get OUT Argument
                ActionCallback actionCallback = new ActionCallback(actionInvocation) {

                    @Override
                    public void success(ActionInvocation invocation) {
                        for (ActionArgument aa : action.getOutputArguments()) {

                            ActionArgumentValue retVal = invocation.getOutput(aa.getName());
                            if (retVal != null) {
                                String[] rowData = {aa.getName(), retVal.toString()};
                                myOUTTableModel.addRow(rowData);
                            }
                        }
                    }

                    @Override
                    public void failure(ActionInvocation ai, UpnpResponse ur, String string) {
                        System.err.println(string);
                    }
                };
                // execute action to get result
                upnpService.getControlPoint().execute(actionCallback);
            }

            if (myINTableModel.getRowCount() != 0) {
                // Set IN Arguments
                jTableINArguments.repaint();
                for (int i = 0; i < action.getInputArguments().length; i++) {
                    // process user input value
                    try {
                        if (action.getInputArguments()[i].getDatatype().getBuiltin().equals(Datatype.Builtin.BOOLEAN)) {
                            boolean userInput = myINTableModel.getValueAt(i, 1).toString().equals("1") ? true:false;
                            actionInvocation.setInput(action.getInputArguments()[i].getName(), userInput); // Can throw InvalidValueException
                        } else if (action.getInputArguments()[i].getDatatype().getBuiltin().equals(Datatype.Builtin.INT)
                                || action.getInputArguments()[i].getDatatype().getBuiltin().equals(Datatype.Builtin.I1)
                                || action.getInputArguments()[i].getDatatype().getBuiltin().equals(Datatype.Builtin.I2)
                                || action.getInputArguments()[i].getDatatype().getBuiltin().equals(Datatype.Builtin.I2_SHORT)
                                || action.getInputArguments()[i].getDatatype().getBuiltin().equals(Datatype.Builtin.I4)) {
                            int userInput = Integer.parseInt(myINTableModel.getValueAt(i, 1).toString());
                            actionInvocation.setInput(action.getInputArguments()[i].getName(), userInput); 
                        } else if (action.getInputArguments()[i].getDatatype().getBuiltin().equals(Datatype.Builtin.STRING)) {
                            String userInput = myINTableModel.getValueAt(i, 1).toString();
                            actionInvocation.setInput(action.getInputArguments()[i].getName(), userInput); 
                        } else {
                            actionInvocation.setInput(action.getInputArguments()[i].getName(), myINTableModel.getValueAt(i, 1).toString()); 
                        }
                    } catch (InvalidValueException | NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                    catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                    
                }

                ActionCallback setTargetCallback = new ActionCallback(actionInvocation) {

                    @Override
                    public void success(ActionInvocation invocation) {
                        ActionArgumentValue[] output = invocation.getOutput();
                        //assertEquals(output.length, 0);
                    }

                    @Override
                    public void failure(ActionInvocation invocation,
                            UpnpResponse operation,
                            String defaultMsg) {
                        System.err.println(defaultMsg);
                    }
                };

                // execute action to set value
                upnpService.getControlPoint().execute(setTargetCallback);
            }

        } catch (Exception ex) {
            System.out.println("Exception occured: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButtonInvokeActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvokeActionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvokeActionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvokeActionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvokeActionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvokeActionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonInvoke;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableINArguments;
    private javax.swing.JTable jTableOUTArguments;
    // End of variables declaration//GEN-END:variables

}
