/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.haoict.ictclingworkbench;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.fourthline.cling.UpnpService;
import org.fourthline.cling.controlpoint.ControlPoint;
import org.fourthline.cling.controlpoint.SubscriptionCallback;
import org.fourthline.cling.model.gena.CancelReason;
import org.fourthline.cling.model.gena.GENASubscription;
import org.fourthline.cling.model.message.UpnpResponse;
import org.fourthline.cling.model.meta.Action;
import org.fourthline.cling.model.meta.ActionArgument;
import org.fourthline.cling.model.meta.Device;
import org.fourthline.cling.model.meta.Service;
import org.fourthline.cling.model.state.StateVariableValue;

/**
 *
 * @author Hao
 */
public class MonitorServiceFrame extends javax.swing.JFrame {

    private UpnpService upnpService;
    private Device device;
    private Service service;
    private Boolean isMonitoring;

    protected MonitorSubscriptionCallback callback;
    protected ControlPoint controlPoint;
    
    private DefaultTableModel myTableModel;

    /**
     * Creates new form MonitorServiceFrame
     */
    public MonitorServiceFrame() {
        initComponents();
    }

    public MonitorServiceFrame(UpnpService upnpService, Device device, Service service) {
        initComponents();

        this.upnpService = upnpService;
        this.device = device;
        this.service = service;
        isMonitoring = false;
        this.callback = new MonitorSubscriptionCallback(service);

        myTableModel = new DefaultTableModel();
        myTableModel.addColumn("State Variable");
        myTableModel.addColumn("Value");
        myTableModel.addColumn("Datatype");
        jTableMonitorData.setModel(myTableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMonitorData = new javax.swing.JTable();
        jButtonStartMonitor = new javax.swing.JButton();
        jButtonStopMonitor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                onFrameClosed(evt);
            }
        });

        jTableMonitorData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableMonitorData);

        jButtonStartMonitor.setText("Start Monitor");
        jButtonStartMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartMonitorActionPerformed(evt);
            }
        });

        jButtonStopMonitor.setText("Stop Monitor");
        jButtonStopMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopMonitorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonStartMonitor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonStopMonitor))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStartMonitor)
                    .addComponent(jButtonStopMonitor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartMonitorActionPerformed
        if (isMonitoring) return;
        upnpService.getControlPoint().execute(callback);
        isMonitoring = true;
    }//GEN-LAST:event_jButtonStartMonitorActionPerformed

    private void jButtonStopMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopMonitorActionPerformed
        callback.end();
        for (int i = myTableModel.getRowCount()-1; i >= 0; i--) {
            myTableModel.removeRow(i);
        }
        
        isMonitoring = false;
    }//GEN-LAST:event_jButtonStopMonitorActionPerformed

    private void onFrameClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onFrameClosed
        jButtonStopMonitorActionPerformed(null);
    }//GEN-LAST:event_onFrameClosed

    protected class MonitorSubscriptionCallback extends SubscriptionCallback {

        public MonitorSubscriptionCallback(Service service) {
            super(service);
        }

        public void eventReceived(final GENASubscription subscription) {

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    List<StateVariableValue> values = new ArrayList<>();
                    for (Map.Entry<String, StateVariableValue> entry
                            : ((Map<String, StateVariableValue>) subscription.getCurrentValues()).entrySet()) {
                        values.add(entry.getValue());                        
                    }
                    
                    // Clear tabale and update
                    for (int i = myTableModel.getRowCount()-1; i >= 0; i--) {
                        myTableModel.removeRow(i);
                    }
                    for (StateVariableValue o : values) {
                        String[] rowData = {o.getStateVariable().getName(), o.toString(), o.getDatatype().getDisplayString()};
                        myTableModel.addRow(rowData);
                    }
                    //view.setValues(values);
                }
            });

            System.out.println("Event received: " + new Date());
        }

        public void eventsMissed(GENASubscription subscription, int numberOfMissedEvents) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    //view.setStartStopEnabled(false, true);
                }
            });
            System.out.println("Events missed: " + numberOfMissedEvents);
        }

        @Override
        protected void failed(final GENASubscription subscription,
                final UpnpResponse responseStatus,
                final Exception exception,
                final String defaultMsg) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {

                    String failureMessage;
                    if (responseStatus == null && exception == null) {
                        failureMessage = "Subscription failed: No response and no exception received";
                    } else {
                        failureMessage = responseStatus != null
                                ? "Subscription failed: " + responseStatus.getResponseDetails()
                                : "Subscription failed: " + exception.toString();
                    }

                    System.out.println(failureMessage);
                   // view.setStartStopEnabled(true, false);

                }
            });
        }

        @Override
        public void established(GENASubscription subscription) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    //view.setStartStopEnabled(false, true);
                }
            });
            System.out.println(
                    "Subscription established for seconds: " + subscription.getActualDurationSeconds()
            );
        }

        @Override
        public void ended(GENASubscription subscription, final CancelReason reason, UpnpResponse responseStatus) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    //view.setStartStopEnabled(true, false);
                }
            });
            System.out.println("Subscription ended" + (reason != null ? ": " + reason : ""));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonitorServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonitorServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonitorServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonitorServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonitorServiceFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStartMonitor;
    private javax.swing.JButton jButtonStopMonitor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMonitorData;
    // End of variables declaration//GEN-END:variables
}
