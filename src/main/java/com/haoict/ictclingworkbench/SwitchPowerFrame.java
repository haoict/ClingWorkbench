/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.haoict.ictclingworkbench;

import javax.swing.JOptionPane;
import org.fourthline.cling.UpnpService;
import org.fourthline.cling.controlpoint.ActionCallback;
import org.fourthline.cling.model.action.ActionArgumentValue;
import org.fourthline.cling.model.action.ActionInvocation;
import org.fourthline.cling.model.message.UpnpResponse;
import org.fourthline.cling.model.meta.Action;
import org.fourthline.cling.model.meta.Device;
import org.fourthline.cling.model.meta.Service;
import org.fourthline.cling.model.types.UDAServiceType;

/**
 *
 * @author Hao
 */
public class SwitchPowerFrame extends javax.swing.JFrame {

    private UpnpService upnpService;
    private Device device;
    private Service service;
    private Boolean isOn;
    private String SERVICE_NAME = "SwitchPower";

    /**
     * Creates new form SwitchPowerFrame
     */
    public SwitchPowerFrame() {
        initComponents();
    }

    public SwitchPowerFrame(UpnpService upnpService, Device device) {
        initComponents();

        try {
            this.upnpService = upnpService;
            this.device = device;

            // Get service type "SwitchPower"
            service = device.findService(new UDAServiceType(SERVICE_NAME));
            //service = device.findService(new UDAServiceId(SERVICE_NAME));

            // first, get its status, on or off, and display it 
            Action getStatusAction = service.getAction("GetStatus");
            ActionInvocation getStatusInvocation = new ActionInvocation(getStatusAction);
            ActionCallback getStatusCallback = new ActionCallback(getStatusInvocation) {

                @Override
                public void success(ActionInvocation invocation) {
                    ActionArgumentValue status = invocation.getOutput("ResultStatus");
                    if (status != null) {
                        // got it
                        isOn = (Boolean) status.getValue();
                        jToggleButtonPower.setSelected((Boolean) status.getValue());
                        if ((Boolean) status.getValue()) {
                            jToggleButtonPower.setText("Press to turn Off");
                        } else {
                            jToggleButtonPower.setText("Press to turn On");
                        }
                    }
                }

                @Override
                public void failure(ActionInvocation ai, UpnpResponse ur, String string) {
                    System.err.println(string);
                }
            };
            // execute action to get status
            upnpService.getControlPoint().execute(getStatusCallback);
        } catch (Exception ex) {
            System.out.println("Exception occured: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButtonPower = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToggleButtonPower.setText("On/Off");
        jToggleButtonPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPowerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButtonPower, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButtonPower, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPowerActionPerformed
        if (jToggleButtonPower.isSelected()) {
            jToggleButtonPower.setText("Press to turn Off");
        } else {
            jToggleButtonPower.setText("Press to turn On");
        }

        try {
            Action action = service.getAction("SetTarget");
            ActionInvocation setTargetInvocation = new ActionInvocation(action);
            setTargetInvocation.setInput("NewTargetValue", !isOn); // Can throw InvalidValueException
            isOn = !isOn;
            ActionCallback setTargetCallback = new ActionCallback(setTargetInvocation) {

                @Override
                public void success(ActionInvocation invocation) {
                    ActionArgumentValue[] output = invocation.getOutput();
                    //assertEquals(output.length, 0);
                }

                @Override
                public void failure(ActionInvocation invocation,
                        UpnpResponse operation,
                        String defaultMsg) {
                    System.err.println(defaultMsg);
                }
            };

            upnpService.getControlPoint().execute(setTargetCallback);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        // set target to service device


    }//GEN-LAST:event_jToggleButtonPowerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwitchPowerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwitchPowerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwitchPowerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwitchPowerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SwitchPowerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton jToggleButtonPower;
    // End of variables declaration//GEN-END:variables
}
